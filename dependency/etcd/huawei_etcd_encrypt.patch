diff -Nur etcd-3.3.23-aes/build etcd-3.3.23/build
--- etcd-3.3.23-aes/build	2020-12-21 22:40:39.405657180 +0800
+++ etcd-3.3.23/build	2020-12-21 22:40:48.958657180 +0800
@@ -10,7 +10,7 @@
 fi
 
 # Set GO_LDFLAGS="-s" for building without symbols for debugging.
-GO_LDFLAGS="$GO_LDFLAGS -X ${REPO_PATH}/version.GitSHA=${GIT_SHA}"
+GO_LDFLAGS="$GO_LDFLAGS -X ${REPO_PATH}/version.GitSHA=${GIT_SHA} -buildid none -tmpdir=temp"
 
 # enable/disable failpoints
 toggle_failpoints() {
@@ -53,12 +53,12 @@
 
 	# Static compilation is useful when etcd is run in a container. $GO_BUILD_FLAGS is OK
 	# shellcheck disable=SC2086
-	CGO_ENABLED=0 go build $GO_BUILD_FLAGS \
+	CGO_ENABLED=1 CGO_CFLAGS="-I$SSL_INCLUDE" CGO_LDFLAGS="-L$SSL_LIB" go build $GO_BUILD_FLAGS \
 		-installsuffix cgo \
 		-ldflags "$GO_LDFLAGS" \
 		-o "${out}/etcd" ${REPO_PATH} || return
 	# shellcheck disable=SC2086
-	CGO_ENABLED=0 go build $GO_BUILD_FLAGS \
+	CGO_ENABLED=1 CGO_CFLAGS="-I$SSL_INCLUDE" CGO_LDFLAGS="-L$SSL_LIB" go build $GO_BUILD_FLAGS \
 		-installsuffix cgo \
 		-ldflags "$GO_LDFLAGS" \
 		-o "${out}/etcdctl" ${REPO_PATH}/etcdctl || return
diff -Nur etcd-3.3.23-aes/pkg/tlsutil/tlsutil.go etcd-3.3.23/pkg/tlsutil/tlsutil.go
--- etcd-3.3.23-aes/pkg/tlsutil/tlsutil.go	2020-12-21 22:40:39.443657180 +0800
+++ etcd-3.3.23/pkg/tlsutil/tlsutil.go	2020-12-21 22:41:11.955657180 +0800
@@ -14,13 +14,476 @@
 
 package tlsutil
 
+// #cgo LDFLAGS: -lcrypto -lssl
+// #include <stdio.h>
+// #include <stdlib.h>
+// #include <string.h>
+// #include "openssl/rand.h"
+// #include "openssl/evp.h"
+// #include "openssl/ossl_typ.h"
+// #include "openssl/x509.h"
+// #include "openssl/ssl.h"
+// #include "openssl/asn1.h"
+// #include "openssl/hmac.h"
+//
+// #define RANDOM_LEN 16
+// #define CIPHER_LEN 16
+// #define ITERATE_TIMES 10000
+//
+// typedef struct {
+//     unsigned char cipherkey[CIPHER_LEN + 1];		/* cipher text vector */
+//     unsigned char key_salt[RANDOM_LEN + 1];		/* salt vector used to derive key */
+//     unsigned char vector_salt[RANDOM_LEN + 1];	/* salt vector used to encrypt/decrypt text */
+//     unsigned int  crc;
+// } CipherkeyFile;
+//
+// typedef struct {
+//     unsigned char randkey[CIPHER_LEN + 1];
+//     unsigned int  crc;
+// } RandkeyFile;
+//
+// /*
+//  * This table is based on the polynomial
+//  *	x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
+//  * (This is the same polynomial used in Ethernet checksums, for instance.)
+//  */
+// unsigned int crc32_table[256] = {
+// 	0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
+// 	0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
+// 	0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
+// 	0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
+// 	0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
+// 	0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
+// 	0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
+// 	0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
+// 	0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
+// 	0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
+// 	0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
+// 	0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
+// 	0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
+// 	0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
+// 	0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
+// 	0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
+// 	0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
+// 	0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
+// 	0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
+// 	0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
+// 	0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
+// 	0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
+// 	0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
+// 	0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
+// 	0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
+// 	0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
+// 	0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
+// 	0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
+// 	0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
+// 	0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
+// 	0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
+// 	0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
+// 	0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
+// 	0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
+// 	0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
+// 	0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
+// 	0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
+// 	0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
+// 	0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
+// 	0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
+// 	0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
+// 	0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
+// 	0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
+// 	0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
+// 	0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
+// 	0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
+// 	0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
+// 	0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
+// 	0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
+// 	0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
+// 	0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
+// 	0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
+// 	0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
+// 	0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
+// 	0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
+// 	0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
+// 	0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
+// 	0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
+// 	0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
+// 	0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
+// 	0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
+// 	0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
+// 	0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
+// 	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
+// };
+// 
+// /* Initialize a CRC accumulator */
+// #define INIT_CRC32_G(crc) ((crc) = 0xFFFFFFFF)
+// 
+// /* Finish a CRC calculation */
+// #define FIN_CRC32_G(crc)	((crc) ^= 0xFFFFFFFF)
+// 
+// /* Accumulate some (more) bytes into a CRC */
+// #define COMP_CRC32_G(crc, data, len)	\
+// do { \
+// 	const unsigned char *__data = (const unsigned char *) (data); \
+// 	unsigned int		__len = (len); \
+// \
+// 	while (__len-- > 0) \
+// 	{ \
+// 		int		__tab_index = ((int) ((crc) >> 24) ^ *__data++) & 0xFF; \
+// 		(crc) = crc32_table[__tab_index] ^ ((crc) << 8); \
+// 	} \
+// } while (0)
+// 
+// /* check the crc of cipher file storing the ciphertext */
+// int IsCipherFileValid(void* file)
+// {
+// 
+//     CipherkeyFile* cipher = (CipherkeyFile*) file;
+//     unsigned int cipher_crc;
+// 
+//     INIT_CRC32_G(cipher_crc);
+//     COMP_CRC32_G(cipher_crc, (char*)cipher, offsetof(CipherkeyFile, crc));
+// 
+//     FIN_CRC32_G(cipher_crc);
+// 
+//     if (cipher->crc != cipher_crc) {
+//         printf("CRC checksum does not match value stored in file, maybe the cipher file is corrupt\n");
+//         return 1;
+//     }
+// 
+//     return 0;
+// }
+// 
+// 
+// /* check the crc of rand file storing the randtext */
+// int IsRandFileValid(void* file)
+// {
+//     RandkeyFile* randfile = (RandkeyFile*) file;
+//     unsigned int rand_crc;
+// 
+//     INIT_CRC32_G(rand_crc);
+//     COMP_CRC32_G(rand_crc, (char*)randfile, offsetof(RandkeyFile, crc));
+// 
+//     FIN_CRC32_G(rand_crc);
+// 
+//     if (randfile->crc != rand_crc) {
+//         printf("CRC checksum does not match value stored in file, maybe the rand file is corrupt\n");
+//         return 1;
+//     }
+// 
+//     return 0;
+// }
+//
+// int getDecryptKey(const unsigned char* initrand, unsigned char* initVector, unsigned char** dk)
+// {
+//     unsigned int retval = 0;
+//
+//     unsigned char* decryptKey = (unsigned char*)malloc(RANDOM_LEN);
+//     if (decryptKey == NULL) {
+//         printf("Malloc memory for decryptKey failed\n");
+//         return 1;
+//     }
+//     memset(decryptKey, 0, RANDOM_LEN);
+//
+//     /* get the decrypt key value */
+//     retval = PKCS5_PBKDF2_HMAC((const char*)initrand,
+//         RANDOM_LEN,
+//         initVector,
+//         RANDOM_LEN,
+//         ITERATE_TIMES,
+//         EVP_sha256(),
+//         RANDOM_LEN,
+//         decryptKey);
+//     if (retval != 1) {
+//         // clear decrypt key
+//         memset(decryptKey, 0, RANDOM_LEN);
+//         free(decryptKey);
+//         printf("generate the derived key failed,errcode:%u\n", retval);
+//         return 1;
+//     }
+//
+//     *dk = decryptKey;
+//     return 0;
+// }
+//
+// int CRYPT_decrypt(const unsigned char* pucKey, int ulKeyLen, const unsigned char* pucIV,
+//     int ulIVLen, unsigned char* pucCipherText, int ulCLen, unsigned char** plainText, int* pulPLen)
+// {
+//     EVP_CIPHER_CTX* ctx = NULL;
+//     int dec_num = 0;
+//     unsigned int blocksize;
+//     unsigned int oLen;
+//
+//     if (pucCipherText == NULL) {
+//         printf("invalid plain text,please check it!\n");
+//         return 1;
+//     }
+//
+//     unsigned char* pucPlainText = (unsigned char*)malloc(CIPHER_LEN + 1);
+//     if (pucPlainText == NULL) {
+//          printf("Malloc memory for plain text failed\n");
+//          return 1;
+//     }
+//     memset(pucPlainText, 0, CIPHER_LEN + 1);
+//
+//     ctx = EVP_CIPHER_CTX_new();
+//     if (ctx == NULL) {
+//         printf("ERROR in EVP_CIPHER_CTX_new:\n");
+//         free(pucPlainText);
+//         return 1;
+//     }
+//
+//     EVP_CipherInit_ex(ctx, EVP_aes_128_cbc(), NULL, pucKey, pucIV, 0);
+//     EVP_CIPHER_CTX_set_padding(ctx, 0);
+//     if (!EVP_DecryptUpdate(ctx, pucPlainText, &dec_num, pucCipherText, ulCLen)) {
+//         printf("ERROR in EVP_DecryptUpdate\n");
+//         goto err;
+//     }
+//     *pulPLen = dec_num;
+//     if (!EVP_DecryptFinal(ctx, pucPlainText + dec_num, &dec_num)) {
+//         (void)fprintf(stderr, ("ERROR in EVP_DecryptFinal\n"));
+//         goto err;
+//     }
+//     *pulPLen += dec_num;
+//
+//     /* padding bytes of the last block need to be removed */
+//     blocksize = EVP_CIPHER_CTX_block_size(ctx);
+//     oLen = (*pulPLen) - 1;
+//     while (*(pucPlainText + oLen) == 0) {
+//         oLen--;
+//     }
+//     if (oLen >= ((*pulPLen) - blocksize) && *(pucPlainText + oLen) == 0x80) {
+//         (*pulPLen) = oLen;
+//     } else {
+//         goto err;
+//     }
+//
+//     pucPlainText[oLen] = '\0';
+//     EVP_CIPHER_CTX_free(ctx);
+//     *plainText = pucPlainText;
+//     return 0;
+//
+// err:
+//     // clear and free
+//     memset(pucPlainText, 0, CIPHER_LEN + 1);
+//     free(pucPlainText);
+//     EVP_CIPHER_CTX_free(ctx);
+//     return 1;
+// }
+import "C"
 import (
 	"crypto/tls"
 	"crypto/x509"
 	"encoding/pem"
+	"fmt"
 	"io/ioutil"
+	"os"
+	"os/exec"
+	"unsafe"
+	"bytes"
+	"io"
 )
 
+const (
+	CIPHER_KEY_FILE = ".cipher"
+	RAN_KEY_FILE    = ".rand"
+	RANDOM_LEN      = 16
+	CIPHER_LEN      = 16
+)
+
+type Cipherkey struct {
+	cipherKey  [CIPHER_LEN + 1]byte
+	keySalt    [RANDOM_LEN + 1]byte
+	vectorSalt [RANDOM_LEN + 1]byte
+	crc        uint32
+}
+
+type Randkey struct {
+	randKey [RANDOM_LEN + 1]byte
+	crc     uint32
+}
+
+func getCipherFile(keyfile string) string {
+	return keyfile + CIPHER_KEY_FILE
+}
+
+func getRandFile(keyfile string) string {
+	return keyfile + RAN_KEY_FILE
+}
+
+func exists(path string) bool {
+	_, err := os.Stat(path)
+	if err != nil {
+		fmt.Printf("The file %s is not available, err: %s", path, err.Error())
+		return false
+	}
+
+	return true
+}
+
+func decodeCipherKeyFile(file string) (*Cipherkey, error) {
+	key, err := ioutil.ReadFile(file)
+	if err != nil {
+		return nil, err
+	}
+
+	// not include crc
+	if len(key) < (CIPHER_LEN + 1 + RANDOM_LEN + 1 + RANDOM_LEN + 1) {
+		return nil, fmt.Errorf("The format of the cipher key file is not valid")
+	}
+
+	cipher := &Cipherkey{}
+
+	// slice[start,end)
+	// get cipherKey
+	start := 0
+	end := start + CIPHER_LEN + 1
+	copy(cipher.cipherKey[:], key[start:end])
+
+	// get keySalt
+	start = end
+	end = start + RANDOM_LEN + 1
+	copy(cipher.keySalt[:], key[start:end])
+
+	// get vectorSalt
+	start = end
+	end = start + RANDOM_LEN + 1
+	copy(cipher.vectorSalt[:], key[start:end])
+
+	// check crc
+	if C.IsCipherFileValid(unsafe.Pointer(&(key[0]))) != 0 {
+		return nil, fmt.Errorf("CRC checksum does not match value stored in file, maybe the cipher file is corrupt\n")
+	}	
+	return cipher, nil
+}
+
+func decodeRandKeyFile(file string) (*Randkey, error) {
+	key, err := ioutil.ReadFile(file)
+	if err != nil {
+		return nil, err
+	}
+
+	if len(key) < (RANDOM_LEN + 1) {
+		return nil, fmt.Errorf("The format of the rand key file is not valid")
+	}
+
+	rand := &Randkey{}
+
+	// get cipherKey
+	start := 0
+	end := start + RANDOM_LEN + 1
+	copy(rand.randKey[:], key[start:end])
+
+        // check crc
+        if C.IsRandFileValid(unsafe.Pointer(&(key[0]))) != 0 {
+                return nil, fmt.Errorf("CRC checksum does not match value stored in file, maybe the rand file is corrupt\n")
+        }
+	return rand, nil
+}
+
+func getDecryptKey(cipher *Cipherkey, rand *Randkey) (*C.uchar, error) {
+	var ret C.int
+	var decryptKey *C.uchar
+
+	randK := (*C.uchar)(unsafe.Pointer(&(rand.randKey[0])))
+	vector := (*C.uchar)(unsafe.Pointer(&(cipher.keySalt[0])))
+	ret = C.getDecryptKey(randK, vector, &decryptKey)
+	if ret != 0 {
+		return nil, fmt.Errorf("get decryptKey failed")
+	}
+
+	return decryptKey, nil
+}
+
+func getPlainText(cipher *Cipherkey, rand *Randkey) (*C.uchar, C.int, error) {
+	var plainText *C.uchar
+	var pLen C.int
+	var ret C.int
+
+	decryptKey, err := getDecryptKey(cipher, rand)
+	if err != nil {
+		return nil, 0, err
+	}
+
+	salt := (*C.uchar)(unsafe.Pointer(&(cipher.vectorSalt[0])))
+	cipherKey := (*C.uchar)(unsafe.Pointer(&(cipher.cipherKey[0])))
+	ret = C.CRYPT_decrypt(decryptKey, C.RANDOM_LEN, salt, C.RANDOM_LEN, cipherKey, C.CIPHER_LEN, &plainText, &pLen)
+
+	// Clear and free decryptKey
+	C.memset(unsafe.Pointer(decryptKey), 0, C.RANDOM_LEN)
+	C.free(unsafe.Pointer(decryptKey))
+	if ret != 0 {
+		return nil, 0, fmt.Errorf("get plain text failed")
+	}
+
+	return plainText, pLen, nil
+}
+
+// DecodeCipherFiles decode the the key which is encrypted.
+func DecodeCipherFiles(keyfile string) ([]byte, error) {
+
+	cipher, err := decodeCipherKeyFile(getCipherFile(keyfile))
+	if err != nil {
+		return nil, err
+	}
+
+	rand, err := decodeRandKeyFile(getRandFile(keyfile))
+	if err != nil {
+		return nil, err
+	}
+
+	plainText, _, err := getPlainText(cipher, rand)
+	if err != nil {
+		return nil, err
+	}
+
+	echoCmd := exec.Command("echo", C.GoString((*C.char)(unsafe.Pointer(plainText))))
+	cmd := exec.Command("openssl", "rsa", "-in", keyfile, "-passin", "stdin")
+	pipeRead, pipeWrite := io.Pipe()
+	defer pipeRead.Close()
+	echoCmd.Stdout = pipeWrite
+	cmd.Stdin = pipeRead
+	var buffer bytes.Buffer
+	cmd.Stdout = &buffer
+
+	err = echoCmd.Start()
+	if err != nil {
+		C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+		C.free(unsafe.Pointer(plainText))
+		pipeWrite.Close()
+		return nil, err
+	}
+	err = cmd.Start()
+	if err != nil {
+		C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+		C.free(unsafe.Pointer(plainText))
+		pipeWrite.Close()
+		return nil, err
+	}
+	err = echoCmd.Wait()
+	if err != nil {
+		C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+		C.free(unsafe.Pointer(plainText))
+		pipeWrite.Close()
+		return nil, err
+	}
+	err = pipeWrite.Close()
+	if err != nil {
+		C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+		C.free(unsafe.Pointer(plainText))
+		return nil, err
+	}
+	err = cmd.Wait()
+	if err != nil {
+		C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+		C.free(unsafe.Pointer(plainText))
+		return nil, err
+	}
+	// Clear and free planText
+	C.memset(unsafe.Pointer(plainText), 0, C.CIPHER_LEN+1)
+	C.free(unsafe.Pointer(plainText))
+	return buffer.Bytes(), nil
+}
+
 // NewCertPool creates x509 certPool with provided CA files.
 func NewCertPool(CAFiles []string) (*x509.CertPool, error) {
 	certPool := x509.NewCertPool()
@@ -66,7 +529,19 @@
 
 	tlsCert, err := parseFunc(cert, key)
 	if err != nil {
-		return nil, err
+		if !exists(getCipherFile(keyfile)) || !exists(getRandFile(keyfile)) {
+			return nil, err
+		}
+
+		key, err := DecodeCipherFiles(keyfile)
+		if err != nil {
+			return nil, err
+		}
+		tlsCert, err := parseFunc(cert, key)
+		if err != nil {
+			return nil, err
+		}
+		return &tlsCert, nil
 	}
 	return &tlsCert, nil
 }
